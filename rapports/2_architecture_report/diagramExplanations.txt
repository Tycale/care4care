1) Class diagram :

The main class of this diagram is the User class. It is the base class for all the different kinds of user the website can have (user, member, non-member, branch officer and verified member). We choosed to do it this way because there was a lot of attributes/methods in common between these classes.

When we speak of a User, we mean a member, verified member, branch officer and a non-member.
When we speak of a Member we mean all of them but the non-member

Some relation are one to one but we decided to create a new class anyway and not add as an attribute for visibility and ease of understanding. (Ex : emergency contact, preference, dashboard)

We have multiples relations between the class Member and User to allow members to have user in their favorite, personnal network or ignored user list.
We can also have a link between a non-member and a member to know which kind of relation they have (family, professional ...).

We did not create a class for the address because it would have taken a lot of space in the diagram for something which is very common. It is
described in more details in the ORM.

We created an enumeration for the jobs categories from the list in the requirements but we can imagine
to be able to add or remove items from that enumeration.

Each user has one agenda and one dashboard.
Each member has credit but a non-member does not, a branch also have credit like requested in the requirements.
Each user can be connected to one or multiple branches.

Each class has all of its required attributes and its main methods.

The branch officer has a attribute "superadmin" which when set to true allow him to manage all the branches. We did that because both type of user are very similar.

The class branch does not derive from the class User even if it is said in the requirements that a branch is a special kind of member. We did that because we did not find many common attributes appart from the credits. 

We created only one class Help instead of two request and offert to make comparison easier and the type is represented by the relation between the class help and class member.


2) Deployment Diagram :

a) Description of software:

Nginx is a free open source HTTP server and reverse proxy server. Nginx is known for its high performance, stability, rich feature set, simple configuration, and low resource consumption. 

http://nginx.org/ 

Gunicorn is a Python WSGI HTTP Server for UNIX it natively support Django, 
it has a worker process management and is compatible with Python 2.x >= 2.6 or 3.x >= 3.1 

http://gunicorn.org/ 

PostgreSQL is a powerful, open source object-relational database system. 
It runs on all major operating systems, including Linux, UNIX (AIX, BSD, HP-UX, SGI IRIX, Mac OS X, Solaris, Tru64), and Windows.
It is fully ACID compliant, has full support for foreign keys, joins, views, triggers, and stored procedures (in multiple languages).
It is highly scalable both in the sheer quantity of data it can manage and in the number of concurrent users it can accommodate.

http://www.postgresql.org

b) How we will use them ? 

Nginx will be use for : 

- Will be used as a reverse proxy
- Delivering static file to the client (proxy)
- Forwarding requests to the Gunicorn workers pool

Gunicorn will be use for : 

- Create a master process which load the app into memory
- This master process will fork workers and it will also kill and recreate new workers when needed.
- The master process never handle any request only workers do.

Postgresql will be use for: 

- Storing and delivering data
- Can only be accessed by Gunicorn workers and not directly by the users 


c) Why did we choose this approach ?

Nginx and Gunicorn give the possibility to split the work across mulitple servers easily. Gunicorn workers pool will optimize the resources across the servers. 

We can also use a Postgresql cluster to optimize database performance and reliability. 

Those techniques are usefull to guarantee scalability, availability and reliability of the system. 

This will be very practical if for exemple the website user base grows quickly and we need more resources in a short period of time. In conclusion you could use cloud services to adapt your needs and optimize the running cost of your application.

3) The architectural style of the application will be MVC because django is a MVC framework. The small particularity of django is that view are called template and controller are called view.

4) We choosed only one physical server to start with because the number of user is pretty low and it would not be worth paying for more than one.
But we have a very scalable solution which in the future can use multiples servers without problem.

Documentation (link):

https://github.com/blog/517-unicorn
http://gunicorn-docs.readthedocs.org
https://www.djangoproject.com/
http://wiki.nginx.org/Main


3) Sequence diagrams :

Complete a job: (see figure X)

In the sequence diagram "Complete a job" we can see a lot of interaction between multiple actors and the system. There is also two way to confirm a job, either by the member or by the branch officer.

First the member ask for his pending actions list and then select a job from that list that he completed. After that he fill informations about the job and confirm. The system receives the informations about the job and send a message to the demanding member (the member which has be helped) to ask him to confirm that the job has been done correctly.

If the member confirm the job, the system credit and debit time to the corresponding members. But if the demanding member can't confirm by himself, the Branch officer can confirm the job for him.


Request Help: (see figure X)

First the member click on the button "I need help". He arrives on a page with a form which he needs to fill with information about the job.
After receiving the data the system checks it and than create a new Job. This new job will be publish on the home page and a notification will be
send to every member which has jobs preferences corresponding to the new job created.


Create account: (see figure x)

A visitor click on the register button and arrives on the create new account page. He fills the data and than confirm. The server receives it and check if the data are correct. If it is correct it will create a new user and send a notification to the branch officer. If it is not correct it will send a error message to the user to tell him what he needs to correct.


